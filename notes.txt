Testing Rules:

[1] Get the Function to Test
[2] Give Input to the Function
[3] Define What IS the output
[4] Check for the output

TDD => "Test Driven Development"

[1] Think about what your code will do
[2] Write the code
[3] Test the code

-- 
Methods:

[1] Describe()
a Jest method for containing one or more related tests. Every time you start writing a new suite of tests for a functionality wrap it in a describe block. and You can nest Describe() in another Describe()
-----[-] Describe(name, func);

[2] Only()
using 'Only' when you just need to Test one or couple of probabilities and skip the other tests
-----[-] it.only() / test.only();

[3] skip()
using 'skip' when you just need to Skip one or couple of probabilities and run the other tests
-----[-] it.skip() / test.skip();

[4] beforeAll(), beforeEach()
both of them are used to preform a task/s before 1 test or all tests
-----[-] beforeAll(() => {})
-----[-] beforeEach(() => {})

[5] afterAll()
used to preform a task/s before all the test completed
-----[-] afterAll(() => {})

[6] .Not. / .toHaveLength() / .toContain()

[7] toBeTruthy() / toBeGreaterThan() / toBeGreaterThanOrEqual() / toBeLessThan() / toBeLessThanOrEqual() / toBeUndefined() / toMatch() / toHaveProperty()

[8] Create Your own Matchers:
expect.extend({
  matcherName (received, target) {
    const pass = received <condition> target;
    if (pass) {
      return {
        message: () => ``,
        pass: true,
      };
    } else {
      return {
        message: () =>
          `Error: `,
        pass: false,
      };
    }
  },
})
